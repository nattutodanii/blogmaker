import React, { useState } from 'react';
import jsPDF from 'jspdf';
import { Download, MessageCircle, Send, FileText, Image as ImageIcon } from 'lucide-react';

interface AdvancedPDFGeneratorProps {
  blogData: any;
  selectedComponent: string;
  blogType: 'exam' | 'course';
  examName: string;
  courseName?: string;
  componentLabel: string;
  onClose: () => void;
}

export function AdvancedPDFGenerator({
  blogData,
  selectedComponent,
  blogType,
  examName,
  courseName,
  componentLabel,
  onClose
}: AdvancedPDFGeneratorProps) {
  const [whatsappLink, setWhatsappLink] = useState('');
  const [telegramLink, setTelegramLink] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);

  const generateBeautifulPDF = async () => {
    if (!whatsappLink || !telegramLink) {
      alert('Please provide both WhatsApp and Telegram channel links');
      return;
    }

    setIsGenerating(true);

    try {
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const margin = 20;
      const contentWidth = pageWidth - (margin * 2);

      // Beautiful first page
      pdf.setFillColor(79, 70, 229); // Indigo background
      pdf.rect(0, 0, pageWidth, 80, 'F');

      // Title
      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(28);
      pdf.setFont('helvetica', 'bold');
      const title = blogType === 'exam' ? examName : `${courseName}`;
      const titleLines = pdf.splitTextToSize(title, contentWidth);
      let yPos = 35;
      titleLines.forEach((line: string) => {
        pdf.text(line, pageWidth / 2, yPos, { align: 'center' });
        yPos += 10;
      });

      // Subtitle
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'normal');
      pdf.text(componentLabel, pageWidth / 2, yPos + 5, { align: 'center' });

      // Reset colors for content
      pdf.setTextColor(0, 0, 0);
      
      // Masters Up branding
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'italic');
      pdf.text('Generated by Masters Up', pageWidth / 2, 100, { align: 'center' });

      // Social links section
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Connect with us:', margin, 130);

      // WhatsApp link with beautiful styling
      pdf.setFillColor(37, 211, 102); // WhatsApp green
      pdf.roundedRect(margin, 140, contentWidth, 12, 3, 3, 'F');
      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'bold');
      pdf.textWithLink('ðŸ“± Join our WhatsApp Channel', margin + 5, 148, { url: whatsappLink });

      // Telegram link with beautiful styling
      pdf.setFillColor(0, 136, 204); // Telegram blue
      pdf.roundedRect(margin, 160, contentWidth, 12, 3, 3, 'F');
      pdf.setTextColor(255, 255, 255);
      pdf.textWithLink('ðŸ“¢ Join our Telegram Channel', margin + 5, 168, { url: telegramLink });

      // Reset colors
      pdf.setTextColor(0, 0, 0);

      // Add decorative elements
      pdf.setDrawColor(79, 70, 229);
      pdf.setLineWidth(2);
      pdf.line(margin, 190, pageWidth - margin, 190);

      // Footer on first page
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.setTextColor(100, 100, 100);
      pdf.text('Â© Masters Up - Your Gateway to Success', pageWidth / 2, pageHeight - 20, { align: 'center' });

      // Content page
      pdf.addPage();
      
      // Header for content page
      pdf.setFillColor(249, 250, 251); // Light gray
      pdf.rect(0, 0, pageWidth, 30, 'F');
      
      pdf.setTextColor(79, 70, 229);
      pdf.setFontSize(20);
      pdf.setFont('helvetica', 'bold');
      pdf.text(componentLabel, margin, 20);

      // Content
      pdf.setTextColor(0, 0, 0);
      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'normal');

      const content = String(blogData[selectedComponent] || '');
      
      // Process content to handle markdown and images
      let processedContent = content
        // Remove image markdown (we'll handle separately)
        .replace(/!\[.*?\]\(.*?\)/g, '[IMAGE]')
        // Convert headers to plain text with formatting
        .replace(/^### (.*$)/gim, '\n\n$1\n')
        .replace(/^## (.*$)/gim, '\n\n$1\n')
        .replace(/^# (.*$)/gim, '\n\n$1\n')
        // Remove markdown formatting
        .replace(/\*\*(.*?)\*\*/g, '$1')
        .replace(/\*(.*?)\*/g, '$1')
        .replace(/`([^`]+)`/g, '$1')
        // Clean up extra whitespace
        .replace(/\n{3,}/g, '\n\n');

      const lines = pdf.splitTextToSize(processedContent, contentWidth);
      let yPosition = 45;
      const lineHeight = 6;

      lines.forEach((line: string) => {
        if (yPosition > pageHeight - 30) {
          pdf.addPage();
          
          // Add header to new page
          pdf.setFillColor(249, 250, 251);
          pdf.rect(0, 0, pageWidth, 25, 'F');
          pdf.setTextColor(79, 70, 229);
          pdf.setFontSize(14);
          pdf.setFont('helvetica', 'bold');
          pdf.text(`${componentLabel} (continued)`, margin, 15);
          
          pdf.setTextColor(0, 0, 0);
          pdf.setFontSize(11);
          pdf.setFont('helvetica', 'normal');
          yPosition = 35;
        }

        // Handle special formatting
        if (line.includes('[IMAGE]')) {
          pdf.setTextColor(100, 100, 100);
          pdf.setFont('helvetica', 'italic');
          pdf.text('[Image would appear here]', margin, yPosition);
          pdf.setTextColor(0, 0, 0);
          pdf.setFont('helvetica', 'normal');
        } else if (line.trim().length > 0 && !line.startsWith(' ')) {
          // Potential header
          pdf.setFont('helvetica', 'bold');
          pdf.text(line, margin, yPosition);
          pdf.setFont('helvetica', 'normal');
        } else {
          pdf.text(line, margin, yPosition);
        }
        
        yPosition += lineHeight;
      });

      // Add page numbers
      const pageCount = pdf.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        pdf.setPage(i);
        pdf.setFontSize(10);
        pdf.setTextColor(100, 100, 100);
        pdf.text(`Page ${i} of ${pageCount}`, pageWidth - margin, pageHeight - 10, { align: 'right' });
      }

      // Download
      const fileName = `${blogType === 'exam' ? examName : courseName}_${componentLabel.replace(/[^a-zA-Z0-9]/g, '_')}.pdf`;
      pdf.save(fileName);

    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Error generating PDF. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-xl p-8 max-w-lg w-full mx-4 max-h-[90vh] overflow-y-auto">
        <div className="flex items-center gap-3 mb-6">
          <FileText className="w-6 h-6 text-indigo-600" />
          <h3 className="text-2xl font-semibold text-gray-800">
            Download Beautiful PDF
          </h3>
        </div>

        <div className="mb-6 p-4 bg-indigo-50 rounded-lg border border-indigo-200">
          <h4 className="font-medium text-indigo-900 mb-2">PDF Preview</h4>
          <p className="text-sm text-indigo-700 mb-1">
            <strong>Title:</strong> {blogType === 'exam' ? examName : courseName}
          </p>
          <p className="text-sm text-indigo-700 mb-1">
            <strong>Component:</strong> {componentLabel}
          </p>
          <p className="text-sm text-indigo-700">
            <strong>Features:</strong> Beautiful design, clickable social links, professional formatting
          </p>
        </div>
        
        <div className="space-y-6">
          <div>
            <label className="flex items-center gap-2 text-sm font-medium text-gray-700 mb-3">
              <MessageCircle className="w-4 h-4 text-green-600" />
              WhatsApp Channel Link
            </label>
            <input
              type="url"
              value={whatsappLink}
              onChange={(e) => setWhatsappLink(e.target.value)}
              placeholder="https://whatsapp.com/channel/your-channel"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
            />
          </div>
          
          <div>
            <label className="flex items-center gap-2 text-sm font-medium text-gray-700 mb-3">
              <Send className="w-4 h-4 text-blue-600" />
              Telegram Channel Link
            </label>
            <input
              type="url"
              value={telegramLink}
              onChange={(e) => setTelegramLink(e.target.value)}
              placeholder="https://t.me/your-channel"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
            />
          </div>

          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div className="flex items-start gap-2">
              <ImageIcon className="w-5 h-5 text-yellow-600 mt-0.5" />
              <div>
                <h5 className="font-medium text-yellow-800 mb-1">PDF Features</h5>
                <ul className="text-sm text-yellow-700 space-y-1">
                  <li>â€¢ Professional layout with branded header</li>
                  <li>â€¢ Clickable social media links on first page</li>
                  <li>â€¢ Proper typography and spacing</li>
                  <li>â€¢ Page numbers and navigation</li>
                  <li>â€¢ Image placeholders for visual content</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        
        <div className="flex gap-3 mt-8">
          <button
            onClick={onClose}
            className="flex-1 px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 font-medium"
          >
            Cancel
          </button>
          <button
            onClick={generateBeautifulPDF}
            disabled={isGenerating || !whatsappLink || !telegramLink}
            className="flex-1 px-6 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-lg hover:from-indigo-700 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2 font-medium"
          >
            {isGenerating ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                Generating PDF...
              </>
            ) : (
              <>
                <Download className="w-4 h-4" />
                Generate Beautiful PDF
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
}